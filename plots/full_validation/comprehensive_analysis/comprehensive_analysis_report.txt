COMPREHENSIVE RING EXPERIMENT ANALYSIS REPORT
============================================

Analysis Date: 2025-06-28
Total Experiments Analyzed: 85920
Network Sizes: 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300
Perturbation Types: lambda_half, lambda_double, const_high, const_low

KEY FINDINGS:
-------------

1. BEST PERFORMING CONDITIONS (by F1 score):
# A tibble: 10 × 7
   perturbation_type     N param_value mean_f1 mean_precision mean_recall n_runs
   <chr>             <int>       <dbl>   <dbl>          <dbl>       <dbl>  <int>
 1 const_high           10        0.95   1              1           1        650
 2 const_high           10        0.9    0.999          0.999       1        650
 3 lambda_half          10        0.25   0.996          0.999       0.994    650
 4 const_high           10        0.85   0.996          0.999       0.993    650
 5 lambda_half          10        0.33   0.990          0.999       0.982    650
 6 const_high           20        0.95   0.978          0.999       0.958    650
 7 lambda_half          20        0.25   0.973          1           0.948    650
 8 const_high           20        0.9    0.965          0.999       0.935    650
 9 lambda_half          20        0.33   0.965          0.999       0.932    650
10 const_high           30        0.95   0.962          1           0.927    650

2. OPTIMAL PARAMETERS BY NETWORK SIZE:
# A tibble: 45 × 4
# Groups:   N, perturbation_type [45]
       N perturbation_type param_value mean_f1
   <int> <chr>                   <dbl>   <dbl>
 1    10 const_high               0.95   1    
 2    10 const_low                0.01   0.782
 3    10 lambda_double            2      0.829
 4    10 lambda_half              0.25   0.996
 5    20 const_high               0.95   0.978
 6    20 const_low                0.01   0.709
 7    20 lambda_double            3      0.748
 8    20 lambda_half              0.25   0.973
 9    30 const_high               0.95   0.962
10    30 const_low                0.01   0.687
# ℹ 35 more rows
# ℹ Use `print(n = ...)` to see more rows

3. COMPUTATIONAL EFFICIENCY SUMMARY:
# A tibble: 12 × 3
       N mean_runtime edges_per_second
   <int>        <dbl>            <dbl>
 1    10         2.59             38.6
 2    20         1.98            113. 
 3    30         4.10            128. 
 4    40         7.23            127. 
 5    50        10.9             129. 
 6    60        24.5              86.6
 7    70        33.0              89.0
 8    80        43.3              91.7
 9    90        54.4              89.2
10   100        66.2              90.6
11   200       416.               64.3
12   300      1137.               61.1

4. STATISTICAL POWER BY CONDITION:
# A tibble: 133 × 5
       N perturbation_type power power_ci_lower power_ci_upper
   <int> <chr>             <dbl>          <dbl>          <dbl>
 1    10 const_high            1              1              1
 2    10 const_high            1              1              1
 3    10 const_high            1              1              1
 4    10 const_low             1              1              1
 5    10 const_low             1              1              1
 6    10 const_low             1              1              1
 7    10 lambda_double         1              1              1
 8    10 lambda_double         1              1              1
 9    10 lambda_double         1              1              1
10    10 lambda_half           1              1              1
# ℹ 123 more rows
# ℹ Use `print(n = ...)` to see more rows
